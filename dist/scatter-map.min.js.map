{"version":3,"sources":["scatter-map.js"],"names":["global","Area","data","_classCallCheck","this","x1","parseFloat","x2","y1","y2","sumArea","Math","ceil","differenceX","differenceY","_createClass","key","value","random","Group","name","_this","areas","arguments","length","undefined","map","position","area","floor","result","some","randomArea","x","y","randomY","ScatterMap","randomX","groups","groupNames","group","push","include","exclude","Array","isArray","randomGroup","filter","indexOf","window"],"mappings":"iXAAA,SAAUA,GAAQ,IAQXC,EARW,WAUhB,SAAAA,EAAYC,GAAMC,gBAAAC,KAAAH,GACjBG,KAAKC,GAAKC,WAAWJ,EAAKG,IAXXD,KAQXH,GARWK,WAAAJ,EAAAK,IAUhBH,KAAAI,GAAAF,WAAkBJ,EAAAM,IAAAJ,KAAAK,GAAAH,WAAAJ,EAAAO,IACjBL,KAAKC,YAAKC,KAAWJ,GAArBE,KAAAC,GACAD,KAAKG,YAAKD,KAAWJ,GAArBE,KAAAI,GAQAJ,KAAKM,QAAUC,KAAKC,KAAKR,KAAKS,YAAcT,KAAKU,aApBlC,OAAAC,aAAAd,IAAAe,IAAA,UAAAC,MAAA,WA8Bf,OAAOb,KAAKC,GAAMD,KAAKS,YAAcF,KAAKO,SAAY,OA9BvCF,IAAA,UAAAC,MAAA,WA+Bf,OAAAb,KAAAI,GAAAJ,KAAAU,YAAAH,KAAAO,SAAA,QA/BejB,EAAA,GAwCfkB,EAxCe,WAAA,SAAAA,EAAAC,GAAA,IAAAC,EAAAjB,KAAAkB,EAAAC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,MAAApB,gBAAAC,KAAAe,GAuDff,KAAKgB,KAAOA,EAvDGhB,KAAAM,QAAA,EA6CjBN,KAAAkB,MAAAA,EAAAI,IAAA,SAAAC,GAeG,IAAIC,EAAO,IAAI3B,EAAK0B,GAIpB,OAFAN,EAAKX,SAAWkB,EAAKlB,QAEdkB,IAhEO,OAAAb,aAAAI,IAAAH,IAAA,aAAAC,MAAA,WAuDf,IAAAC,EAAYE,KAAMS,MAAAlB,KAAAO,SAAAd,KAAAM,SAsBdA,EAAU,EApBdoB,EAAA,KAWD,OATC1B,KAAKkB,MAALS,KAAaT,SAAAA,GAuBZ,GAAIJ,GAAUR,GAAWQ,GAAUR,EAAUkB,EAAKlB,QAEjD,OAtBDoB,EAAKpB,GAsBG,EAzBIA,GAMTkB,EAAAlB,UAGLoB,KApEgBd,IAAA,SAAAC,MAAA,WAAA,IAAAW,EAAAxB,KAAA4B,aA4Ef,OAAAJ,GAEAK,EAAIH,EAAAA,UA0BFI,EAAGN,EAAKO,WArBRL,SAnFaX,EAAA,GAqGfiB,EArGe,WAuGbH,SAAAA,EAAQI,GADFlC,gBAAAC,KAAAgC,GAENF,IAAAA,EAAQC,EAALjC,KAxGU,IAAA,IAAAkB,KA0GdhB,KAAAkC,UAEDlC,KAAAmC,cA5GerC,EAAA,CAAA,IAAAsC,EAAA,IAAArB,EAAAC,EAAAlB,EAAAkB,GAAAE,OA8IdlB,KAAKkC,OAAOlB,GAAQoB,EAEpBpC,KAAKmC,WAAWE,KAAKrB,IAhJP,OAAAL,aAAAqB,IAAApB,IAAA,cAAAC,MAAA,WA6JsB,IAA1Ba,EAA0BP,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAjBnB,KAAKmC,WACzB,OAAOnC,KAAKkC,OAAOR,EAAOnB,KAAKkB,MAAMlB,KAAKO,SAAWY,EAAON,aA9J7CR,IAAA,kBAAAC,MAAA,WAyKyC,IAAzCyB,EAAyCnB,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAA/BnB,KAAKmC,WAAYI,EAAcpB,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,MAEnDqB,MAAMC,QAAQH,KA/BlBA,GAAIF,IAmCAI,MAAMC,QAAQF,KA/BlBA,GAAKJ,IAmCN,IAAIC,EAAQpC,KAAK0C,YAAYJ,EAAQK,OAAO,SAAC3B,GAAD,OAAqC,IAA3BuB,EAAQK,QAAQ5B,MAEtE,OAAOoB,GAASA,EAAMtB,YArLPF,IAAA,SAAAC,MAAA,WAAA,OAAAb,KAAA0C,cAAA5B,aAAAkB,EAAA,GAoMjBpC,EAAOoC,WAAaA,EApMrB,CAsMGa","file":"scatter-map.min.js","sourcesContent":["(function(global) {\n\n\t/**\n\t * 区域矩形\n\t * @class Area\n\t * @constructor\n\t * @param {Object} data 包含构成范围的四个坐标点x1, x2, y1, y2\n\t */\n\tclass Area {\n\n\t\tconstructor(data) {\n\t\t\tthis.x1 = parseFloat(data.x1);\n\t\t\tthis.x2 = parseFloat(data.x2);\n\t\t\tthis.y1 = parseFloat(data.y1);\n\t\t\tthis.y2 = parseFloat(data.y2);\n\n\t\t\tthis.differenceX = this.x2 - this.x1;\n\t\t\tthis.differenceY = this.y2 - this.y1;\n\n\t\t\t// 长宽之积为区域矩形的面积，计算权重的参数\n\t\t\tthis.sumArea = Math.ceil(this.differenceX * this.differenceY);\n\t\t}\n\n\t\t/**\n\t\t * 区域矩形内随机生成一个横坐标\n\t\t * @method randomX\n\t\t * @for Area\n\t\t * @return {String} 横坐标，单位：百分比\n\t\t */\n\t\trandomX() {\n\t\t\treturn this.x1 + (this.differenceX * Math.random()) + '%';\n\t\t}\n\n\t\t/**\n\t\t * 区域矩形内随机生成一个纵坐标\n\t\t * @method randomX\n\t\t * @for Area\n\t\t * @return {String} 纵坐标，单位：百分比\n\t\t */\n\t\trandomY() {\n\t\t\treturn this.y1 + (this.differenceY * Math.random()) + '%';\n\t\t}\n\n\t}\n\n\t/**\n\t * 区域矩形的分组\n\t * @class Group\n\t * @constructor\n\t * @param {String} name 分组名\n\t * @param {Array[Area]} areas 区域矩形集合\n\t */\n\tclass Group {\n\n\t\tconstructor(name, areas = []) {\n\t\t\tthis.name = name; // 分组名\n\n\t\t\tthis.sumArea = 0; // 分组内区域矩形的总面积，计算权重的参数\n\n\t\t\tthis.areas = areas.map((position) => {\n\t\t\t\tlet area = new Area(position);\n\n\t\t\t\tthis.sumArea += area.sumArea;\n\n\t\t\t\treturn area;\n\t\t\t}); // 分组对应的区域矩形\n\t\t}\n\n\t\t/**\n\t\t * 根据面积权重随机获取一个区域矩形\n\t\t * @method randomArea\n\t\t * @for Group\n\t\t * @return {Area} 区域矩形对象\n\t\t */\n\t\trandomArea() {\n\n\t\t\tlet random = Math.floor(Math.random() * this.sumArea);\n\t\t\tlet sumArea = 0;\n\t\t\tlet result = null;\n\n\t\t\tthis.areas.some((area) => {\n\n\t\t\t\tif (random >= sumArea && random <= sumArea + area.sumArea) {\n\t\t\t\t\tresult = area;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tsumArea += area.sumArea;\n\t\t\t});\n\n\t\t\treturn result;\n\t\t}\n\n\t\t/**\n\t\t * 从分组内的区域矩形随机生成一个坐标\n\t\t * @method random\n\t\t * @for Group\n\t\t * @return {Object} 坐标对象，x 横坐标， y 纵坐标\n\t\t */\n\t\trandom() {\n\t\t\tlet area = this.randomArea();\n\n\t\t\tif (area) {\n\t\t\t\treturn {\n\t\t\t\t\tx: area.randomX(),\n\t\t\t\t\ty: area.randomY()\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * 散点图工具\n\t * @class ScatterMap\n\t * @constructor\n\t * @exports\n\t * @param {Object} [options] 配置项\n\t *   @param {String} [options.image] 绘制坐标的地图\n\t *   @param {Object} [options.data] 区域矩形分组数据\n\t *     @param {Boolean} [options.data['分组名'].isShow] 是否绘制可见\n\t *     @param {Array} [options.data['分组名'].Areas] 区域矩形数组，每个区域矩形包含x1, x2, y1, y2四个构成面的点\n\t *   @param {Object} [options.setting] 设置项\n\t *     @param {Boolean} [options.resize] 是否重置宽高\n\t *       @param {Boolean} [options.width] 重置宽度\n\t *       @param {Boolean} [options.height] 重置高度\n\t */\n\tclass ScatterMap {\n\n\t\tconstructor(options) {\n\t\t\tlet data = options.data; // 分组数据\n\n\t\t\tthis.groups = {}; // 分组对象\n\n\t\t\tthis.groupNames = []; // 所有分组名\n\n\t\t\tfor (let name in data) {\n\n\t\t\t\tlet group = new Group(name, data[name].areas); // 创建分组\n\n\t\t\t\tthis.groups[name] = group;\n\n\t\t\t\tthis.groupNames.push(name);\n\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * 根据权重随机获取一个分组\n\t\t * @method randomGroup\n\t\t * @for ScatterMap\n\t\t * @param {Array} [result=totalResult] 权重结果集，默认按面积计算权重\n\t\t * @return {Group} 分组对象\n\t\t */\n\t\trandomGroup(result = this.groupNames) {\n\t\t\treturn this.groups[result[Math.floor(Math.random() * result.length)]];\n\t\t}\n\n\t\t/**\n\t\t * 从特定分组随机获取坐标\n\t\t * @method randomFromGroup\n\t\t * @for ScatterMap\n\t\t * @param {Array|String} [include=groupNames] 包含的分组，默认为全部分组\n\t\t * @param {Array|String} [include=[]] 排除的分组，默认为空数组\n\t\t * @return {Object} 坐标对象，x 横坐标， y 纵坐标\n\t\t */\n\t\trandomFromGroup(include = this.groupNames, exclude = []) {\n\n\t\t\tif (!Array.isArray(include)) {\n\t\t\t\tinclude = [include];\n\t\t\t}\n\n\t\t\tif (!Array.isArray(exclude)) {\n\t\t\t\texclude = [exclude];\n\t\t\t}\n\n\t\t\tlet group = this.randomGroup(include.filter((name) => exclude.indexOf(name) === -1));\n\n\t\t\treturn group && group.random();\n\t\t}\n\n\t\t/**\n\t\t * 根据权重随机获取坐标\n\t\t * @method random\n\t\t * @for ScatterMap\n\t\t * @return {Object} 坐标对象，x 横坐标， y 纵坐标\n\t\t */\n\t\trandom() {\n\t\t\treturn this.randomGroup().random();\n\t\t}\n\n\t}\n\n\tglobal.ScatterMap = ScatterMap; // 暴露到全局变量\n\n})(window);"]}